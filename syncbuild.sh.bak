#!/bin/bash\nset -o errexit\nCURL="/usr/bin/curl"\nREPO_DIST="https://gerrit.googlesource.com/git-repo"\nREPO_PATH="${HOME}/bin"\nREPO="${REPO_PATH}/repo"\nBUILDID="$1"\nif [ -z "$CAF_URL" ]; then\n  if [ ${BUILDID:0:11} == "LE.UM.2.4.1" ]; then\n    CAF_URL="ssh://git@git.codeaurora.org:9222/external/private_CAF_2.4.1/le/manifest.git"\n  elif [ ${BUILDID:0:11} == "LE.UM.5.3.2" ]; then\n    CAF_URL="ssh://git@git.codeaurora.org:9222/external/private_le/le/manifest.git"\n  else\n    CAF_URL="git://codeaurora.org/quic/le/le/manifest.git"\n  fi\nfi\nURL="$CAF_URL"\nif [ -z "$BRANCH" ]; then\n  BRANCH="release"\nfi\nTARGET="$2"\nJOB=8\nERR_MSG="A list of valid IDs can be found at https://source.codeaurora.org/quic/le/le/manifest/log/?h=release".\nif [ -z "${BUILDID}" ]; then\n  echo "Please supply a Build ID."\n  echo "${ERR_MSG}"\n  echo "Example Usage: ./syncbuild.sh IOT.LE.1.0-04802-8x53"\n  exit 1\nelse\n  MANIFEST="${BUILDID}.xml"\nfi\nmkdir -p "${REPO_PATH}"\nif [ ! -f "${REPO}" ]; then\n  ${CURL} "${REPO_DIST}" > "${REPO}"\nfi\nchmod +x "${REPO}"\nif [ ! -d .repo ]; then\n  ${REPO} init -u ${URL} -b ${BRANCH} -m ${MANIFEST} --repo-url=git://codeaurora.org/tools/repo.git --repo-branch=caf-stable\nfi\nif [ ! -f ".repo/manifests/${MANIFEST}" ]; then\n  echo "ERROR: An Invalid Build ID was supplied."\n  echo "${ERR_MSG}"\n  exit 2\nfi\n${REPO} sync --no-tags -j ${JOB}